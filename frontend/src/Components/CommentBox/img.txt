import { useState, useContext } from 'react';
import { FaStar } from 'react-icons/fa';
import './CommentBox.css';
import { format } from 'date-fns';
import { ShopContext } from '../../Context/ShopContext';
import insertPicture from '../Assets/insertPicture.png';

const CommentBox = ({ comments, displayFlag, product_id }) => {
  const [showComments, setShowComments] = useState(displayFlag === 'comments');
  const [expandedComments, setExpandedComments] = useState({});
  const [showAllComments, setShowAllComments] = useState(false);
  const { user } = useContext(ShopContext);

  // State for new comment
  const [newComment, setNewComment] = useState({
    rating: 0,
    content: '',
    images: [], // Store image URLs
    product_id: product_id,
    created_by: user ? { id: user.Id, full_name: user.fullName } : { id: null, full_name: '' },
    create_at: new Date().toISOString(),
    files: [], // Store selected files for upload
  });

  // State for image preview
  const [imagePreview, setImagePreview] = useState(null);

  // Loading state
  const [loading, setLoading] = useState(false);

  // Function to handle image selection
  const handleImageChange = (e) => {
    const files = Array.from(e.target.files);
    setNewComment(prevComment => ({
      ...prevComment,
      // images: [], // Clear previous images if any
      files: files,
    }));

    // Show image preview
    const reader = new FileReader();
    reader.onload = () => {
      if (reader.readyState === 2) {
        setImagePreview(reader.result);
      }
    };
    reader.readAsDataURL(e.target.files[0]);
  };

  // Function to handle rating change
  const handleRatingChange = (rating) => {
    setNewComment({ ...newComment, rating });
  };

  // Function to handle content change
  const handleContentChange = (e) => {
    setNewComment({ ...newComment, content: e.target.value });
  };

  // Function to upload images
  const uploadImages = async () => {
    setLoading(true);
    try {
      const formData = new FormData();
      newComment.files.forEach(file => formData.append('image', file));

      const response = await fetch('http://localhost:4000/upload', {
        method: 'POST',
        body: formData
      });
      const data = await response.json();

      if (data.success) {
        return data.image_url; // Assuming 'image_url' is returned by your upload endpoint
      } else {
        throw new Error('Image upload failed');
      }
    } catch (error) {
      console.error('Error uploading images:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

  // Function to handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      // Upload images if any
      let imageUrls = [];
      if (newComment.files.length > 0) {
        imageUrls = await uploadImages(); // Wait for image upload to complete
      }

      // Update new comment with image URLs
      const updatedComment = {
        ...newComment,
        images: imageUrls,
      };

      // Call API to create comment
      const response = await fetch('http://localhost:4000/comment/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedComment)
      });
      const data = await response.json();

      if (data.success) {
        console.log('Comment created successfully:', data.comment);
        setNewComment({
          rating: 0,
          content: '',
          images: [],
          product_id: product_id,
          created_by: user ? { id: user.Id, full_name: user.fullName } : { id: null, full_name: '' },
          create_at: new Date().toISOString(),
          files: [],
        }); // Reset form
      } else {
        throw new Error('Failed to create comment');
      }
    } catch (error) {
      console.error('Error creating comment:', error);
      // Handle error as needed
    }
  };


  const formatDate = (dateString) => {
    try {
      if (!dateString) return ''; // Handle empty dateString gracefully

      const date = new Date(dateString);

      if (isNaN(date.getTime())) {
        throw new Error('Invalid date');
      }

      return format(date, 'yyyy-MM-dd HH:mm');
    } catch (error) {
      console.error('Error formatting date:', error);
      return ''; // Return empty string or handle error as per your application's requirement
    }
  };

  // Function to toggle expand/collapse of comments
  const toggleExpand = (index) => {
    setExpandedComments((prevState) => ({
      ...prevState,
      [index]: !prevState[index],
    }));
  };

  // Sort comments by rating
  const sortedComments = [...comments].sort((a, b) => b.rating - a.rating);

  // Display only a subset of comments based on showAllComments state
  const displayedComments = showAllComments ? sortedComments : sortedComments.slice(0, 5);

  // Function to toggle show all comments
  const toggleShowAllComments = () => {
    setShowAllComments((prevShowAll) => !prevShowAll);
  };

  return (
    <div className="comment-box">
      <div className="new-comment-form">
        <h3>Leave a Comment</h3>
        <form onSubmit={handleSubmit}>
          <div className="rating">
            {Array.from({ length: 5 }, (_, i) => (
              <FaStar
                key={i}
                color={i < newComment.rating ? '#ffc107' : '#e4e5e9'}
                onClick={() => handleRatingChange(i + 1)}
              />
            ))}
          </div>
          <textarea
            value={newComment.content}
            onChange={handleContentChange}
            placeholder="Write your comment here..."
            required
          />
          <div className="addproduct-itemfield">
            <p>Insert Image</p>
            <label htmlFor="file-input" className="addproduct-thumbnail-label">
              {imagePreview ? (
                <img
                  src={imagePreview}
                  alt="Preview"
                  className="addproduct-thumbnail-img"
                />
              ) : (
                <img
                  src={insertPicture}
                  alt="Insert Placeholder"
                  className="addproduct-placeholder-img"
                />
              )}
            </label>
            <input
              onChange={handleImageChange}
              type="file"
              name="image"
              id="file-input"
              hidden
            />
          </div>
          <button type="submit" disabled={loading}>
            {loading ? 'Adding...' : 'Add Comment'}
          </button>
        </form>
      </div>

      {/* Displaying comments */}
      {showComments &&
        displayedComments.map((comment, index) => {
          const isExpanded = expandedComments[index];
          const content = isExpanded ? comment.content : comment.content.slice(0, 500);

          return (
            <div key={index} className={`comment ${isExpanded ? 'expanded' : ''}`}>
              <div className="user-info">
                <p>{comment.created_by.full_name}</p>
                <div className="rating">
                  {Array.from({ length: 5 }, (_, i) => (
                    <FaStar
                      key={i}
                      color={i < comment.rating ? '#ffc107' : '#e4e5e9'}
                    />
                  ))}
                </div>
              </div>
              <div className="created-at">
                <p>{formatDate(comment.create_at)}</p>
              </div>
              <div className="content">
                <p>
                  {content}
                  {comment.content.length > 500 && (
                    <span onClick={() => toggleExpand(index)} className="show-more">
                      {isExpanded ? ' Show less' : '... Show more'}
                    </span>
                  )}
                </p>
              </div>
              <div className="images">
                {comment.images && comment.images.length > 0 && (
                  <div>
                    {comment.images.map((image, i) => (
                      <img key={i} src={image} alt={`comment-${index}-image-${i}`} />
                    ))}
                  </div>
                )}
              </div>
            </div>
          );
        })}

      {/* Toggle show all comments button */}
      {sortedComments.length > 5 && (
        <button onClick={toggleShowAllComments} className="toggle-comments-btn">
          {showAllComments ? 'Show Less' : 'Show All Comments'}
        </button>
      )}
    </div>
  );
};

export default CommentBox;
