# -*- coding: utf-8 -*-
"""AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gYyh3LqvP04MTEAm475i3fruoKZtxPNy
"""

import pandas as pd
from surprise import Dataset, Reader, SVD, accuracy
from surprise.model_selection import train_test_split, GridSearchCV

# Đọc dữ liệu từ file CSV
df = pd.read_csv('transactions.csv')

# Chuyển đổi dữ liệu thành định dạng của Surprise
reader = Reader(rating_scale=(1, 5))
data = Dataset.load_from_df(df[['user_id', 'product_id', 'rating']], reader)

# Chia dữ liệu thành tập huấn luyện và tập kiểm tra
trainset, testset = train_test_split(data, test_size=0.2)

# Định nghĩa grid parameters cho grid search
param_grid = {'n_factors': [50, 100, 150],
              'n_epochs': [20, 30, 40],
              'lr_all': [0.002, 0.005, 0.01],
              'reg_all': [0.02, 0.04, 0.1]}

# Thực hiện grid search để tìm ra các tham số tối ưu
grid_search = GridSearchCV(SVD, param_grid, measures=['rmse'], cv=5, n_jobs=-1)
grid_search.fit(data)

# In ra các tham số tối ưu
print("Best RMSE score found:", grid_search.best_score['rmse'])
print("Best parameters:", grid_search.best_params['rmse'])

# Sử dụng mô hình tối ưu để huấn luyện trên tập huấn luyện
best_model = grid_search.best_estimator['rmse']
best_model.fit(trainset)

# Đánh giá mô hình trên tập kiểm tra
predictions = best_model.test(testset)
test_rmse = accuracy.rmse(predictions)
print(f'Test RMSE: {test_rmse:.4f}')

# Hàm gợi ý sản phẩm
def get_top_n_recommendations(model, user_id, n=10, df=df):
    # Lấy danh sách tất cả các product_id
    all_product_ids = df['product_id'].unique()

    # Dự đoán rating cho tất cả các sản phẩm mà user chưa đánh giá
    user_ratings = [(product_id, model.predict(user_id, product_id).est) for product_id in all_product_ids]

    # Sắp xếp theo rating dự đoán
    user_ratings.sort(key=lambda x: x[1], reverse=True)

    # Lấy top n sản phẩm
    top_n_recommendations = user_ratings[:n]

    return top_n_recommendations

# Ví dụ: Gợi ý 10 sản phẩm cho user_id = 22580465
user_id = 22580465
recommendations = get_top_n_recommendations(best_model, user_id, 10, df)
print(f'\nTop Recommendations for User {user_id}:')
for product_id, rating in recommendations:
    print(f'Product ID: {product_id:<10}, Predicted Rating: {rating:<5.2f}')