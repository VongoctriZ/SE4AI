const maxItemInCart = 300;
const jwt = require('jsonwebtoken');
// const bcrypt = require('bcrypt');
const User = require('../models/user.m');
const Cart = require('../models/cart.m')

class UserController {

    async signUp(req, res) {
        const { fullName, phoneNumber, email, password, confirmPassword, address, Id } = req.body;

        // Validate required fields
        if (!fullName || !phoneNumber || !email || !password || !confirmPassword || !address) {
            return res.status(400).json({ success: false, errors: "All fields are required" });
        }

        // Check if passwords match
        if (password !== confirmPassword) {
            return res.status(400).json({ success: false, errors: "Passwords do not match" });
        }

        let newUser;

        if (Id) {
            // If an ID is provided, check if it already exists
            const existingUser = await User.findOne({ Id });
            if (existingUser) {
                // If a user with the provided ID exists, return an error
                return res.status(400).json({ success: false, errors: "User with the provided ID already exists" });
            }
            newUser = new User({ Id });
        } else {
            // If no ID is provided, generate a new one
            const lastUser = await User.findOne().sort({ Id: -1 });
            const lastId = lastUser ? lastUser.Id : 0;
            newUser = new User({ Id: lastId + 1 });
        }

        // Hash the password
        const hashedPassword = password;

        // Create new user
        newUser.fullName = fullName;
        newUser.phoneNumber = phoneNumber;
        newUser.email = email;
        newUser.password = hashedPassword;
        newUser.address = address;

        try {
            await newUser.save();

            try {
                // Create a new cart for the user

                const lastCart = await Cart.findOne().sort({ id: -1 });
                const lastCartId = lastCart ? lastCart.id : 0;
                let newCart = new Cart({ id: lastCartId + 1, userId: newUser.Id });

                await newCart.save();

                newUser.cartId = newCart.id;

                await newUser.save();

            } catch (error) {
                console.error("Error saving cart:", error);
                res.status(500).json({ message: "Error creating user" });
            }

            const payload = {
                user: {
                    id: newUser._id // Use id generated by MongoDB
                }
            };

            const token = jwt.sign(payload, 'secret_ecom', { expiresIn: '24h' });
            res.json({
                success: true, token, user: {
                    Id: newUser.Id,
                    email: newUser.email,
                    fullName: newUser.fullName,
                }
            });
        } catch (error) {
            console.error("Error saving user:", error);
            res.status(500).json({ message: "Error creating user" });
        }
    }


    async login(req, res) {
        const { email, password } = req.body;

        // Validate required fields
        if (!email || !password) {
            return res.status(400).json({ success: false, errors: "All fields are required" });
        }

        // Check if user exists
        let user = await User.findOne({ email });
        if (!user) {
            return res.status(400).json({ success: false, errors: "Invalid email address or password" });
        }

        // Compare hashed passwords
        // const isMatch = await bcrypt.compare(password, user.password);
        const isMatch = password === user.password;
        if (!isMatch) {
            return res.status(400).json({ success: false, errors: "Invalid email address or password" });
        }

        const payload = {
            user: {
                id: user._id
            }
        };

        const token = jwt.sign(payload, 'secret_ecom', { expiresIn: '24h' });
        res.json({
            success: true, token, user: {
                Id: user.Id,
                email: user.email,
                fullName: user.fullName,
            }
        });
    }

    async update(req, res) {
        const { fullName, email, password } = req.body;

        let toUpdateUser;
        try {
            toUpdateUser = await User.findById(req.user.Id);
            if (!toUpdateUser) {
                return res.status(404).json({ message: "User not found" });
            }
            console.log("User found:", req.body);
        } catch (error) {
            console.error("Error finding user:", error);
            return res.status(500).json({ message: "Error finding user" });
        }

        if (fullName) {
            toUpdateUser.fullName = fullName;
            console.log("Full name updated");
        }

        if (email) {
            toUpdateUser.email = email;
            console.log("Email updated");
        }

        if (password) {
            // Ensure password is hashed before saving
            // const hashedPassword = await bcrypt.hash(password, 10);
            toUpdateUser.password = password;
            console.log("Password updated");
        }

        try {
            console.log("Attempting to save user...");
            await toUpdateUser.save();
            console.log('User saved successfully');
            res.json({
                user: {
                    fullName: toUpdateUser.fullName,
                    email: toUpdateUser.email
                }
            });
        } catch (error) {
            console.error("Error saving user:", error);
            res.status(500).json({ message: "Error updating user" });
        }
    }
}

module.exports = new UserController();