// const jwt = require('jsonwebtoken')
// const Users = require('../models/user.m');

// // creating endpoint for registering the user
// const SignUp = async (req,res) => {
//     let check = await Users.findOne({ email: req.body.email });
//     if (check) {
//         return res.status(400).json({ success: false, errors: "Existing user found with same email address" })
//     }

//     let cart = {};
//     for (let i = 0; i < 300; i++) {
//         cart[i] = 0;
//     }

//     const user = new Users({
//         name: req.body.username,
//         email: req.body.email,
//         password: req.body.password,
//         cartData: cart,
//     })

//     await user.save();

//     const data = {
//         user: {
//             id: user.id
//         }
//     }

//     const token = jwt.sign(data, 'secret_ecom');
//     res.json({ success: true, token })
// }


// // creating endpoint for user point

// const Login = async (req, res) => {
//     let user = await Users.findOne({ email: req.body.email });

//     if (user) {
//         const passComp = req.body.password === user.password;

//         if (passComp) {
//             const data = {
//                 user: {
//                     id: user.id
//                 }
//             }

//             const token = jwt.sign(data, 'secret_ecom');
//             res.json({ success: true, token });
//         }
//         else {
//             res.json({ success: false, errors: "wrong password!" });
//         }
//     }
//     else {
//         res.json({ success: false, errors: "Wrong Email Id!" });
//     }
// }

// module.exports = {Login,SignUp};


const jwt = require('jsonwebtoken');
// const bcrypt = require('bcrypt');
const Users = require('../models/user.m');

// creating endpoint for registering the user
const SignUp = async (req, res) => {
    const { fullName, phoneNumber, emailAddress, password, confirmPassword } = req.body;

    // Validate required fields
    if (!fullName || !phoneNumber || !emailAddress || !password || !confirmPassword) {
        return res.status(400).json({ success: false, errors: "All fields are required" });
    }

    // Check if passwords match
    if (password !== confirmPassword) {
        return res.status(400).json({ success: false, errors: "Passwords do not match" });
    }

    // Check if user already exists
    let existingUser = await Users.findOne({ emailAddress });
    if (existingUser) {
        return res.status(400).json({ success: false, errors: "Existing user found with the same email address" });
    }

    // Initialize cart data
    let cart = {};
    for (let i = 0; i < 300; i++) {
        cart[i] = 0;
    }

    // Hash the password
    // const hashedPassword = await bcrypt.hash(password, 10);
    const hashedPassword = password;

    // Create new user
    const user = new Users({
        fullName,
        phoneNumber,
        emailAddress,
        password: hashedPassword,
        cartData: cart,
    });

    await user.save();

    const payload = {
        user: {
            id: user._id // Use _id as generated by MongoDB
        }
    };

    const token = jwt.sign(payload, 'secret_ecom', { expiresIn: '24h' });
    res.json({ success: true, token });
};

// creating endpoint for user login
const Login = async (req, res) => {
    const { emailAddress, password } = req.body;

    // Validate required fields
    if (!emailAddress || !password) {
        return res.status(400).json({ success: false, errors: "All fields are required" });
    }

    // Check if user exists
    let user = await Users.findOne({ emailAddress });
    if (!user) {
        return res.status(400).json({ success: false, errors: "Invalid email address or password" });
    }

    // Compare hashed passwords
    // const isMatch = await bcrypt.compare(password, user.password);
    
    const isMatch = password === user.password;
    if (!isMatch) {
        return res.status(400).json({ success: false, errors: "Invalid email address or password" });
    }

    const payload = {
        user: {
            id: user._id
        }
    };

    const token = jwt.sign(payload, 'secret_ecom', { expiresIn: '24h' });
    res.json({ success: true, token });
};

module.exports = { SignUp, Login };